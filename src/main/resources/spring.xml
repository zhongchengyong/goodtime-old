<?xml version= "1.0" encoding ="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 上下文依赖注入 -->
	<context:annotation-config/>
	<!-- 自动扫描service -->
	<context:component-scan base-package="com.mySSM.service">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan>
	<!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="com.mySSM.util.EncryptPropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>
    
    <!-- spring和MyBatis整合，可以不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件,如果用这，就不需要mybatis-config.xml文件了 -->
         <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
<!-- 	 	<property name="configLocation" value="classpath:mybatis-config.xml" />-->
    </bean>
        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mySSM.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
        <!-- 对标注@Transactional注解的Bean进行加工处理，以织入事务管理切面 -->
    <!-- 默认情况下，<tx:annotation-driven的transaction-manager的值为transactionManager，
    因而此处可直接简化为 <tx:annotation-driven/>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref = "dataSource"/>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 事务增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务属性定义  -->
        <tx:attributes>
 <!--            <tx:method name="get*" read-only="false"/>
            <tx:method name="save*" rollback-for="Exception"/>
            <tx:method name="update*"/> -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- 对服务层的类提供事务支持 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod" expression="execution(* com.mySSM.service..*(..))"/>
        <!-- 引用事务增强 -->
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>
</beans>